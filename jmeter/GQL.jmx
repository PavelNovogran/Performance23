<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="gql" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">false</boolProp>
        <boolProp name="useExpires">true</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="server" elementType="Argument">
            <stringProp name="Argument.name">server</stringProp>
            <stringProp name="Argument.value">gql.guidehero.co</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="token" elementType="Argument">
            <stringProp name="Argument.name">token</stringProp>
            <stringProp name="Argument.value">${token}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="extraction_card_id" elementType="Argument">
            <stringProp name="Argument.name">extraction_card_id</stringProp>
            <stringProp name="Argument.value">${extraction_card_id}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="refferer_id" elementType="Argument">
            <stringProp name="Argument.name">refferer_id</stringProp>
            <stringProp name="Argument.value">${refferer_id}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="collection_id" elementType="Argument">
            <stringProp name="Argument.name">collection_id</stringProp>
            <stringProp name="Argument.value">${collection_id}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user_id" elementType="Argument">
            <stringProp name="Argument.name">user_id</stringProp>
            <stringProp name="Argument.value">${user_id}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename"></stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames"></stringProp>
      </CSVDataSet>
      <hashTree/>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder" enabled="true">
        <stringProp name="ProxyControlGui.port">8888</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list"/>
        <collectionProp name="ProxyControlGui.include_list"/>
        <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">0</intProp>
        <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.detect_graphql_request">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
        <intProp name="ProxyControlGui.proxy_http_sampler_naming_mode">0</intProp>
        <stringProp name="ProxyControlGui.default_encoding"></stringProp>
        <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name"></stringProp>
        <stringProp name="ProxyControlGui.proxy_pause_http_sampler"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">false</boolProp>
        <boolProp name="ProxyControlGui.regex_match">false</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
      </ProxyControl>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="User1" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="my profile page" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="102594">gql</stringProp>
            <stringProp name="82025895">User2</stringProp>
            <stringProp name="437961882">my profile page</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="authLogin" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="authLogin" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;authLogin&quot;,&quot;variables&quot;:{&quot;login&quot;:&quot;Pablo&quot;,&quot;password&quot;:&quot;12345678Qq&quot;},&quot;query&quot;:&quot;query authLogin($login: String!, $password: String!) {\n  authToken(login: $login, password: $password, rememberMe: true) {\n    token\n    ...CoreUserAuthFields\n    __typename\n  }\n}\n\nfragment CoreUserAuthFields on AuthSchema {\n  userAuth {\n    id\n    username\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/gql/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">authLogin</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query authLogin($login: String!, $password: String!) {
  authToken(login: $login, password: $password, rememberMe: true) {
    token
    ...CoreUserAuthFields
    __typename
  }
}

fragment CoreUserAuthFields on AuthSchema {
  userAuth {
    id
    username
    __typename
  }
  __typename
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;login&quot;:&quot;Pablo&quot;,&quot;password&quot;:&quot;12345678Qq&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://gql.guidehuman.co/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://gql.guidehuman.co</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="refferer_id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">refferer_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="getUserProfile" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getUserProfile(Chris)" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getUserProfile&quot;,&quot;variables&quot;:{&quot;username&quot;:&quot;chrisryu&quot;},&quot;query&quot;:&quot;query getUserProfile($username: String!) {\n  allUsers(filters: {username: $username}) {\n    items {\n      id\n      username\n      isActive\n      createdAt\n      isFollowedByMe\n      ...CoreUserInfoFields\n      userStyle {\n        ...CoreStylesFields\n        __typename\n      }\n      followers {\n        totalCount\n        __typename\n      }\n      followings {\n        totalCount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CoreUserInfoFields on UserObjectType {\n  userInfo {\n    bio\n    tagline\n    firstName\n    lastName\n    organization\n    occupation\n    location\n    __typename\n  }\n  userTags {\n    totalCount\n    items\n    __typename\n  }\n  __typename\n}\n\nfragment CoreStylesFields on CardStyleSchema {\n  id\n  bgStyle\n  layout\n  fontColorType\n  bgColor {\n    ...ColorFields\n    __typename\n  }\n  bgImageSet {\n    ...ImagesSetFields\n    __typename\n  }\n  thumbnailImageSet {\n    ...ImagesSetFields\n    __typename\n  }\n  uploadedThumbnailImages {\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  uploadedBgImages {\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  prevThumbnailImages {\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  prevBgImages {\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  colors {\n    recentlyUsedColor {\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    recentlyUsedGradient {\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    suggestedColor {\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    suggestedGradient {\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment ColorFields on ColorSchema {\n  id\n  colorType\n  colorValue\n  fontColor\n  __typename\n}\n\nfragment ImagesSetFields on ImageSetSchema {\n  id\n  imageId\n  images {\n    id\n    url\n    fontColor\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">gql.guidehero.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/gql/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getUserProfile</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getUserProfile($username: String!) {
  allUsers(filters: {username: $username}) {
    items {
      id
      username
      isActive
      createdAt
      isFollowedByMe
      ...CoreUserInfoFields
      userStyle {
        ...CoreStylesFields
        __typename
      }
      followers {
        totalCount
        __typename
      }
      followings {
        totalCount
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment CoreUserInfoFields on UserObjectType {
  userInfo {
    bio
    tagline
    firstName
    lastName
    organization
    occupation
    location
    __typename
  }
  userTags {
    totalCount
    items
    __typename
  }
  __typename
}

fragment CoreStylesFields on CardStyleSchema {
  id
  bgStyle
  layout
  fontColorType
  bgColor {
    ...ColorFields
    __typename
  }
  bgImageSet {
    ...ImagesSetFields
    __typename
  }
  thumbnailImageSet {
    ...ImagesSetFields
    __typename
  }
  uploadedThumbnailImages {
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  uploadedBgImages {
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  prevThumbnailImages {
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  prevBgImages {
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  colors {
    recentlyUsedColor {
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    recentlyUsedGradient {
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    suggestedColor {
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    suggestedGradient {
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    __typename
  }
  __typename
}

fragment ColorFields on ColorSchema {
  id
  colorType
  colorValue
  fontColor
  __typename
}

fragment ImagesSetFields on ImageSetSchema {
  id
  imageId
  images {
    id
    url
    fontColor
    __typename
  }
  __typename
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;username&quot;:&quot;chrisryu&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://gql.guidehuman.co/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://gql.guidehuman.co</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">${token}</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getProfileSections(Chris)" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getProfileSections&quot;,&quot;variables&quot;:{&quot;isLib&quot;:false,&quot;name&quot;:&quot;%%&quot;,&quot;userId&quot;:&quot;0dac79cc-436a-4ab0-aaf3-7e5f92b66a54&quot;},&quot;query&quot;:&quot;query getProfileSections($userId: String!, $isLib: Boolean = false, $name: String = \&quot;%%\&quot;) {\n  allSections(\n    filters: {userId: $userId, isLibrary: $isLib, deletedAtIsNull: true, nameIlike: $name}\n  ) {\n    ...CoreSectionsFields\n    __typename\n  }\n}\n\nfragment CoreSectionsFields on SectionListObjectType {\n  totalCount\n  items {\n    id\n    name\n    position\n    isDefault\n    items {\n      items {\n        id\n        title\n        description\n        type\n        isPrivate\n        cardInfo(referrerId: $userId) {\n          customTitle\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/gql/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getProfileSections</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getProfileSections($userId: String!, $isLib: Boolean = false, $name: String = &quot;%%&quot;) {
  allSections(
    filters: {userId: $userId, isLibrary: $isLib, deletedAtIsNull: true, nameIlike: $name}
  ) {
    ...CoreSectionsFields
    __typename
  }
}

fragment CoreSectionsFields on SectionListObjectType {
  totalCount
  items {
    id
    name
    position
    isDefault
    items {
      items {
        id
        title
        description
        type
        isPrivate
        cardInfo(referrerId: $userId) {
          customTitle
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
  __typename
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;isLib&quot;:false,&quot;name&quot;:&quot;%%&quot;,&quot;userId&quot;:&quot;0dac79cc-436a-4ab0-aaf3-7e5f92b66a54&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://gql.guidehuman.co/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${protocol}://gql.guidehuman.co</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">${token}</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getUserProfile(Christy)" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getUserProfile&quot;,&quot;variables&quot;:{&quot;username&quot;:&quot;christykolsteeg&quot;},&quot;query&quot;:&quot;query getUserProfile($username: String!) {\n  allUsers(filters: {username: $username}) {\n    items {\n      id\n      username\n      isActive\n      createdAt\n      isFollowedByMe\n      ...CoreUserInfoFields\n      userStyle {\n        ...CoreStylesFields\n        __typename\n      }\n      followers {\n        totalCount\n        __typename\n      }\n      followings {\n        totalCount\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CoreUserInfoFields on UserObjectType {\n  userInfo {\n    bio\n    tagline\n    firstName\n    lastName\n    organization\n    occupation\n    location\n    __typename\n  }\n  userTags {\n    totalCount\n    items\n    __typename\n  }\n  __typename\n}\n\nfragment CoreStylesFields on CardStyleSchema {\n  id\n  bgStyle\n  layout\n  fontColorType\n  bgColor {\n    ...ColorFields\n    __typename\n  }\n  bgImageSet {\n    ...ImagesSetFields\n    __typename\n  }\n  thumbnailImageSet {\n    ...ImagesSetFields\n    __typename\n  }\n  uploadedThumbnailImages {\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  uploadedBgImages {\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  prevThumbnailImages {\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  prevBgImages {\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  colors {\n    recentlyUsedColor {\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    recentlyUsedGradient {\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    suggestedColor {\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    suggestedGradient {\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment ColorFields on ColorSchema {\n  id\n  colorType\n  colorValue\n  fontColor\n  __typename\n}\n\nfragment ImagesSetFields on ImageSetSchema {\n  id\n  imageId\n  images {\n    id\n    url\n    fontColor\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">gql.guidehero.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/gql/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getUserProfile</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getUserProfile($username: String!) {
  allUsers(filters: {username: $username}) {
    items {
      id
      username
      isActive
      createdAt
      isFollowedByMe
      ...CoreUserInfoFields
      userStyle {
        ...CoreStylesFields
        __typename
      }
      followers {
        totalCount
        __typename
      }
      followings {
        totalCount
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment CoreUserInfoFields on UserObjectType {
  userInfo {
    bio
    tagline
    firstName
    lastName
    organization
    occupation
    location
    __typename
  }
  userTags {
    totalCount
    items
    __typename
  }
  __typename
}

fragment CoreStylesFields on CardStyleSchema {
  id
  bgStyle
  layout
  fontColorType
  bgColor {
    ...ColorFields
    __typename
  }
  bgImageSet {
    ...ImagesSetFields
    __typename
  }
  thumbnailImageSet {
    ...ImagesSetFields
    __typename
  }
  uploadedThumbnailImages {
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  uploadedBgImages {
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  prevThumbnailImages {
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  prevBgImages {
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  colors {
    recentlyUsedColor {
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    recentlyUsedGradient {
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    suggestedColor {
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    suggestedGradient {
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    __typename
  }
  __typename
}

fragment ColorFields on ColorSchema {
  id
  colorType
  colorValue
  fontColor
  __typename
}

fragment ImagesSetFields on ImageSetSchema {
  id
  imageId
  images {
    id
    url
    fontColor
    __typename
  }
  __typename
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;username&quot;:&quot;christykolsteeg&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://gql.guidehuman.co/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://gql.guidehuman.co</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">${token}</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="getProfileSections(Christy)" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getProfileSections&quot;,&quot;variables&quot;:{&quot;isLib&quot;:false,&quot;name&quot;:&quot;%%&quot;,&quot;userId&quot;:&quot;490aeb8e-2306-4464-bf0c-845020303296&quot;},&quot;query&quot;:&quot;query getProfileSections($userId: String!, $isLib: Boolean = false, $name: String = \&quot;%%\&quot;) {\n  allSections(\n    filters: {userId: $userId, isLibrary: $isLib, deletedAtIsNull: true, nameIlike: $name}\n  ) {\n    ...CoreSectionsFields\n    __typename\n  }\n}\n\nfragment CoreSectionsFields on SectionListObjectType {\n  totalCount\n  items {\n    id\n    name\n    position\n    isDefault\n    items {\n      items {\n        id\n        title\n        description\n        type\n        isPrivate\n        cardInfo(referrerId: $userId) {\n          customTitle\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/gql/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getProfileSections</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getProfileSections($userId: String!, $isLib: Boolean = false, $name: String = &quot;%%&quot;) {
  allSections(
    filters: {userId: $userId, isLibrary: $isLib, deletedAtIsNull: true, nameIlike: $name}
  ) {
    ...CoreSectionsFields
    __typename
  }
}

fragment CoreSectionsFields on SectionListObjectType {
  totalCount
  items {
    id
    name
    position
    isDefault
    items {
      items {
        id
        title
        description
        type
        isPrivate
        cardInfo(referrerId: $userId) {
          customTitle
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
  __typename
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;isLib&quot;:false,&quot;name&quot;:&quot;%%&quot;,&quot;userId&quot;:&quot;490aeb8e-2306-4464-bf0c-845020303296&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://gql.guidehuman.co/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${protocol}://gql.guidehuman.co</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">${token}</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="updateUser" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="updateUser" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;updateUser&quot;,&quot;variables&quot;:{&quot;userInfo&quot;:{&quot;bio&quot;:&quot;${bio}&quot;,&quot;tagline&quot;:&quot;${tagline}&quot;,&quot;firstName&quot;:&quot;${first_name}&quot;,&quot;lastName&quot;:&quot;${last_name}&quot;}},&quot;query&quot;:&quot;mutation updateUser($userInfo: UserInfoInput, $userStyle: UserStyleInput) {\n  updateUser(userInfo: $userInfo, userStyle: $userStyle) {\n    id\n    ...CoreUserInfoFields\n    userStyle {\n      ...CoreStylesFields\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CoreUserInfoFields on UserObjectType {\n  userInfo {\n    bio\n    tagline\n    firstName\n    lastName\n    organization\n    occupation\n    location\n    __typename\n  }\n  userTags {\n    totalCount\n    items\n    __typename\n  }\n  __typename\n}\n\nfragment CoreStylesFields on CardStyleSchema {\n  id\n  bgStyle\n  layout\n  fontColorType\n  bgColor {\n    ...ColorFields\n    __typename\n  }\n  bgImageSet {\n    ...ImagesSetFields\n    __typename\n  }\n  thumbnailImageSet {\n    ...ImagesSetFields\n    __typename\n  }\n  uploadedThumbnailImages {\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  uploadedBgImages {\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  prevThumbnailImages {\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  prevBgImages {\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  colors {\n    recentlyUsedColor {\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    recentlyUsedGradient {\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    suggestedColor {\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    suggestedGradient {\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment ColorFields on ColorSchema {\n  id\n  colorType\n  colorValue\n  fontColor\n  __typename\n}\n\nfragment ImagesSetFields on ImageSetSchema {\n  id\n  imageId\n  images {\n    id\n    url\n    fontColor\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/gql/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">updateUser</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation updateUser($userInfo: UserInfoInput, $userStyle: UserStyleInput) {
  updateUser(userInfo: $userInfo, userStyle: $userStyle) {
    id
    ...CoreUserInfoFields
    userStyle {
      ...CoreStylesFields
      __typename
    }
    __typename
  }
}

fragment CoreUserInfoFields on UserObjectType {
  userInfo {
    bio
    tagline
    firstName
    lastName
    organization
    occupation
    location
    __typename
  }
  userTags {
    totalCount
    items
    __typename
  }
  __typename
}

fragment CoreStylesFields on CardStyleSchema {
  id
  bgStyle
  layout
  fontColorType
  bgColor {
    ...ColorFields
    __typename
  }
  bgImageSet {
    ...ImagesSetFields
    __typename
  }
  thumbnailImageSet {
    ...ImagesSetFields
    __typename
  }
  uploadedThumbnailImages {
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  uploadedBgImages {
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  prevThumbnailImages {
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  prevBgImages {
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  colors {
    recentlyUsedColor {
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    recentlyUsedGradient {
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    suggestedColor {
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    suggestedGradient {
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    __typename
  }
  __typename
}

fragment ColorFields on ColorSchema {
  id
  colorType
  colorValue
  fontColor
  __typename
}

fragment ImagesSetFields on ImageSetSchema {
  id
  imageId
  images {
    id
    url
    fontColor
    __typename
  }
  __typename
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;userInfo&quot;:{&quot;bio&quot;:&quot;${bio}&quot;,&quot;tagline&quot;:&quot;${tagline}&quot;,&quot;firstName&quot;:&quot;${first_name}&quot;,&quot;lastName&quot;:&quot;${last_name}&quot;}}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://gql.guidehuman.co/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${protocol}://gql.guidehuman.co</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${token}</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.util.Random;
import java.lang.StringBuilder;
import java.text.SimpleDateFormat;
String generateRandom(int quantity, Random random)
{
StringBuilder builder = new StringBuilder();
String mCHAR = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;;
for (int i = 0; i &lt; quantity; i++)
{
int number = random.nextInt(mCHAR.length());
char ch = mCHAR.charAt(number);
builder.append(ch);
}
return builder.toString();
}
Random random = new Random();
String bio = &quot;Hi_&quot; + generateRandom(4, random);
String tagline = &quot;testing_&quot; + generateRandom(4, random);
String first_name = &quot;Pablo&quot; + generateRandom(1, random);
String last_name = &quot;Novy_&quot; + generateRandom(1, random);
vars.put(&quot;bio&quot;, bio);
vars.put(&quot;tagline&quot;, tagline);
vars.put(&quot;first_name&quot;, first_name);
vars.put(&quot;last_name&quot;, last_name);

</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="createCollection" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="createCollection" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;createCollection&quot;,&quot;variables&quot;:{&quot;title&quot;:&quot;${title}&quot;,&quot;isPrivate&quot;:false},&quot;query&quot;:&quot;mutation createCollection($title: String!, $isPrivate: Boolean, $cardsIds: [String], $referrerId: String) {\n  createCollection(title: $title, isPrivate: $isPrivate, cardsIds: $cardsIds) {\n    hasNestedCollection\n    ...CoreCardFields\n    __typename\n  }\n}\n\nfragment CoreCardFields on CardSchema {\n  id\n  userId\n  type\n  linkText\n  linkHtml\n  extractionStatus\n  isPrivate\n  isSavedByMe\n  isLikedByMe\n  isPickedByMe\n  isPrivate\n  ...CoreCardInfoFields\n  cardStyle(referrerId: $referrerId) {\n    ...CoreStylesFields\n    __typename\n  }\n  __typename\n}\n\nfragment CoreCardInfoFields on CardSchema {\n  tags {\n    items\n    totalCount\n    __typename\n  }\n  mediaTags {\n    items\n    totalCount\n    __typename\n  }\n  creators {\n    totalCount\n    items {\n      userId\n      roleName\n      user {\n        id\n        username\n        userInfo {\n          firstName\n          lastName\n          __typename\n        }\n        userStyle {\n          thumbnailImageSet {\n            images(filters: {imageTypeIn: [PREVIEW]}) {\n              url\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  externalSources {\n    totalCount\n    items {\n      id\n      sourceDomainName\n      position\n      sourceUrl\n      isOriginalSource\n      __typename\n    }\n    __typename\n  }\n  externalCreators {\n    totalCount\n    items {\n      id\n      creatorName\n      position\n      isOriginalCreator\n      __typename\n    }\n    __typename\n  }\n  cardInfo(referrerId: $referrerId) {\n    id\n    customTitle\n    isCreatorHidden\n    isDouble\n    __typename\n  }\n  __typename\n}\n\nfragment CoreStylesFields on CardStyleSchema {\n  id\n  bgStyle\n  layout\n  fontColorType\n  bgColor {\n    ...ColorFields\n    __typename\n  }\n  bgImageSet {\n    ...ImagesSetFields\n    __typename\n  }\n  thumbnailImageSet {\n    ...ImagesSetFields\n    __typename\n  }\n  uploadedThumbnailImages {\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  uploadedBgImages {\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  prevThumbnailImages {\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  prevBgImages {\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  colors {\n    recentlyUsedColor {\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    recentlyUsedGradient {\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    suggestedColor {\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    suggestedGradient {\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment ColorFields on ColorSchema {\n  id\n  colorType\n  colorValue\n  fontColor\n  __typename\n}\n\nfragment ImagesSetFields on ImageSetSchema {\n  id\n  imageId\n  images {\n    id\n    url\n    fontColor\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/gql/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">createCollection</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation createCollection($title: String!, $isPrivate: Boolean, $cardsIds: [String], $referrerId: String) {
  createCollection(title: $title, isPrivate: $isPrivate, cardsIds: $cardsIds) {
    hasNestedCollection
    ...CoreCardFields
    __typename
  }
}

fragment CoreCardFields on CardSchema {
  id
  userId
  type
  linkText
  linkHtml
  extractionStatus
  isPrivate
  isSavedByMe
  isLikedByMe
  isPickedByMe
  isPrivate
  ...CoreCardInfoFields
  cardStyle(referrerId: $referrerId) {
    ...CoreStylesFields
    __typename
  }
  __typename
}

fragment CoreCardInfoFields on CardSchema {
  tags {
    items
    totalCount
    __typename
  }
  mediaTags {
    items
    totalCount
    __typename
  }
  creators {
    totalCount
    items {
      userId
      roleName
      user {
        id
        username
        userInfo {
          firstName
          lastName
          __typename
        }
        userStyle {
          thumbnailImageSet {
            images(filters: {imageTypeIn: [PREVIEW]}) {
              url
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
  externalSources {
    totalCount
    items {
      id
      sourceDomainName
      position
      sourceUrl
      isOriginalSource
      __typename
    }
    __typename
  }
  externalCreators {
    totalCount
    items {
      id
      creatorName
      position
      isOriginalCreator
      __typename
    }
    __typename
  }
  cardInfo(referrerId: $referrerId) {
    id
    customTitle
    isCreatorHidden
    isDouble
    __typename
  }
  __typename
}

fragment CoreStylesFields on CardStyleSchema {
  id
  bgStyle
  layout
  fontColorType
  bgColor {
    ...ColorFields
    __typename
  }
  bgImageSet {
    ...ImagesSetFields
    __typename
  }
  thumbnailImageSet {
    ...ImagesSetFields
    __typename
  }
  uploadedThumbnailImages {
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  uploadedBgImages {
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  prevThumbnailImages {
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  prevBgImages {
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  colors {
    recentlyUsedColor {
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    recentlyUsedGradient {
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    suggestedColor {
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    suggestedGradient {
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    __typename
  }
  __typename
}

fragment ColorFields on ColorSchema {
  id
  colorType
  colorValue
  fontColor
  __typename
}

fragment ImagesSetFields on ImageSetSchema {
  id
  imageId
  images {
    id
    url
    fontColor
    __typename
  }
  __typename
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;title&quot;:&quot;${title}&quot;,&quot;isPrivate&quot;:false}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://gql.guidehuman.co/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${protocol}://gql.guidehuman.co</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.util.Random;
import java.lang.StringBuilder;
import java.text.SimpleDateFormat;
String generateRandom(int quantity, Random random)
{
StringBuilder builder = new StringBuilder();
String mCHAR = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;;
for (int i = 0; i &lt; quantity; i++)
{
int number = random.nextInt(mCHAR.length());
char ch = mCHAR.charAt(number);
builder.append(ch);
}
return builder.toString();
}
Random random = new Random();
String title = &quot;test_&quot; + generateRandom(1, random);
vars.put(&quot;title&quot;, title);

</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">collection_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="pick from a link" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="cardExtraction" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;cardExtraction&quot;,&quot;variables&quot;:{&quot;url&quot;:&quot;${url}&quot;,&quot;referrerId&quot;:&quot;${refferer_id}&quot;},&quot;query&quot;:&quot;mutation cardExtraction($url: String!, $referrerId: String) {\n  startExtractCard(url: $url) {\n    ... on CardSchema {\n      ...CoreCardFields\n      __typename\n    }\n    ... on PreExtractCardSchema {\n      id\n      title\n      image\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CoreCardFields on CardSchema {\n  id\n  userId\n  type\n  linkText\n  linkHtml\n  extractionStatus\n  isPrivate\n  isSavedByMe\n  isLikedByMe\n  isPickedByMe\n  isPinnedByMe\n  isPrivate\n  ...CoreCardInfoFields\n  cardStyle(referrerId: $referrerId) {\n    ...CoreStylesFields\n    __typename\n  }\n  __typename\n}\n\nfragment CoreCardInfoFields on CardSchema {\n  tags {\n    items\n    totalCount\n    __typename\n  }\n  mediaTags {\n    items\n    totalCount\n    __typename\n  }\n  creators {\n    totalCount\n    items {\n      userId\n      roleName\n      user {\n        id\n        username\n        userInfo {\n          firstName\n          lastName\n          __typename\n        }\n        userStyle {\n          thumbnailImageSet {\n            images(filters: {imageTypeIn: [PREVIEW]}) {\n              url\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  externalSources {\n    totalCount\n    items {\n      id\n      sourceDomainName\n      position\n      sourceUrl\n      isOriginalSource\n      __typename\n    }\n    __typename\n  }\n  externalCreators {\n    totalCount\n    items {\n      id\n      creatorName\n      position\n      isOriginalCreator\n      __typename\n    }\n    __typename\n  }\n  cardInfo(referrerId: $referrerId) {\n    id\n    customTitle\n    isCreatorHidden\n    isDouble\n    __typename\n  }\n  __typename\n}\n\nfragment CoreStylesFields on CardStyleSchema {\n  bgStyle\n  layout\n  fontColorType\n  thumbnailLogic\n  id\n  cardId\n  userId\n  createdAt\n  updatedAt\n  bgColor {\n    ...ColorFields\n    __typename\n  }\n  bgImageSet {\n    ...ImagesSetFields\n    __typename\n  }\n  thumbnailImageSet {\n    ...ImagesSetFields\n    __typename\n  }\n  uploadedThumbnailImages {\n    totalCount\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  uploadedBgImages {\n    totalCount\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  prevThumbnailImages {\n    totalCount\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  prevBgImages {\n    totalCount\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  colors {\n    recentlyUsedColor {\n      totalCount\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    recentlyUsedGradient {\n      totalCount\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    suggestedColor {\n      totalCount\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    suggestedGradient {\n      totalCount\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment ColorFields on ColorSchema {\n  colorType\n  colorValue\n  fontColor\n  id\n  __typename\n}\n\nfragment ImagesSetFields on ImageSetSchema {\n  imageId\n  images {\n    url\n    fontColor\n    id\n    __typename\n  }\n  id\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/gql/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">cardExtraction</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation cardExtraction($url: String!, $referrerId: String) {
  startExtractCard(url: $url) {
    ... on CardSchema {
      ...CoreCardFields
      __typename
    }
    ... on PreExtractCardSchema {
      id
      title
      image
      __typename
    }
    __typename
  }
}

fragment CoreCardFields on CardSchema {
  id
  userId
  type
  linkText
  linkHtml
  extractionStatus
  isPrivate
  isSavedByMe
  isLikedByMe
  isPickedByMe
  isPinnedByMe
  isPrivate
  ...CoreCardInfoFields
  cardStyle(referrerId: $referrerId) {
    ...CoreStylesFields
    __typename
  }
  __typename
}

fragment CoreCardInfoFields on CardSchema {
  tags {
    items
    totalCount
    __typename
  }
  mediaTags {
    items
    totalCount
    __typename
  }
  creators {
    totalCount
    items {
      userId
      roleName
      user {
        id
        username
        userInfo {
          firstName
          lastName
          __typename
        }
        userStyle {
          thumbnailImageSet {
            images(filters: {imageTypeIn: [PREVIEW]}) {
              url
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
  externalSources {
    totalCount
    items {
      id
      sourceDomainName
      position
      sourceUrl
      isOriginalSource
      __typename
    }
    __typename
  }
  externalCreators {
    totalCount
    items {
      id
      creatorName
      position
      isOriginalCreator
      __typename
    }
    __typename
  }
  cardInfo(referrerId: $referrerId) {
    id
    customTitle
    isCreatorHidden
    isDouble
    __typename
  }
  __typename
}

fragment CoreStylesFields on CardStyleSchema {
  bgStyle
  layout
  fontColorType
  thumbnailLogic
  id
  cardId
  userId
  createdAt
  updatedAt
  bgColor {
    ...ColorFields
    __typename
  }
  bgImageSet {
    ...ImagesSetFields
    __typename
  }
  thumbnailImageSet {
    ...ImagesSetFields
    __typename
  }
  uploadedThumbnailImages {
    totalCount
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  uploadedBgImages {
    totalCount
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  prevThumbnailImages {
    totalCount
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  prevBgImages {
    totalCount
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  colors {
    recentlyUsedColor {
      totalCount
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    recentlyUsedGradient {
      totalCount
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    suggestedColor {
      totalCount
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    suggestedGradient {
      totalCount
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    __typename
  }
  __typename
}

fragment ColorFields on ColorSchema {
  colorType
  colorValue
  fontColor
  id
  __typename
}

fragment ImagesSetFields on ImageSetSchema {
  imageId
  images {
    url
    fontColor
    id
    __typename
  }
  id
  __typename
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;url&quot;:&quot;${url}&quot;,&quot;referrerId&quot;:&quot;${refferer_id}&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://gql.guidehuman.co/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${protocol}://gql.guidehuman.co</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${token}</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="extraction_card_id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">extraction_card_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">not found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="URL" enabled="true">
            <stringProp name="filename">C:/Users/Pavel.Navahran/Downloads/apache-jmeter-5.4.3 (1)/apache-jmeter-5.4.3/bin/URL.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">url</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="pickCard" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;pickCard&quot;,&quot;variables&quot;:{&quot;cardId&quot;:&quot;${extraction_card_id}&quot;,&quot;isPrivate&quot;:false,&quot;referrerId&quot;:&quot;${refferer_id}&quot;},&quot;query&quot;:&quot;mutation pickCard($cardId: String!, $isPrivate: Boolean, $referrerId: String) {\n  pickCard(cardId: $cardId, isPrivate: $isPrivate, referrerId: $referrerId) {\n    id\n    isPickedByMe\n    isPrivate\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/gql/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">pickCard</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation pickCard($cardId: String!, $isPrivate: Boolean, $referrerId: String) {
  pickCard(cardId: $cardId, isPrivate: $isPrivate, referrerId: $referrerId) {
    id
    isPickedByMe
    isPrivate
    __typename
  }
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;cardId&quot;:&quot;${extraction_card_id}&quot;,&quot;isPrivate&quot;:false,&quot;referrerId&quot;:&quot;${refferer_id}&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://gql.guidehuman.co/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${protocol}://gql.guidehuman.co</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${token}</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="linkCollectionsAndCards" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="linkCollectionsAndCards" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;linkCollectionsAndCards&quot;,&quot;variables&quot;:{&quot;cardsIds&quot;:[&quot;${extraction_card_id}&quot;],&quot;collectionsIds&quot;:[&quot;${collection_id}&quot;]},&quot;query&quot;:&quot;mutation linkCollectionsAndCards($cardsIds: [String!]!, $collectionsIds: [String]!, $referrerId: String) {\n  linkCollectionsAndCards(cardsIds: $cardsIds, collectionsIds: $collectionsIds) {\n    id\n    cardsFromCollection(filters: {idIn: $cardsIds}) {\n      totalCount\n      items {\n        ...CoreCardFields\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CoreCardFields on CardSchema {\n  id\n  userId\n  type\n  linkText\n  linkHtml\n  extractionStatus\n  isPrivate\n  isSavedByMe\n  isLikedByMe\n  isPickedByMe\n  isPinnedByMe\n  isPrivate\n  ...CoreCardInfoFields\n  cardStyle(referrerId: $referrerId) {\n    ...CoreStylesFields\n    __typename\n  }\n  __typename\n}\n\nfragment CoreCardInfoFields on CardSchema {\n  tags {\n    items\n    totalCount\n    __typename\n  }\n  mediaTags {\n    items\n    totalCount\n    __typename\n  }\n  creators {\n    totalCount\n    items {\n      userId\n      roleName\n      user {\n        id\n        username\n        userInfo {\n          firstName\n          lastName\n          __typename\n        }\n        userStyle {\n          thumbnailImageSet {\n            images(filters: {imageTypeIn: [PREVIEW]}) {\n              url\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  externalSources {\n    totalCount\n    items {\n      id\n      sourceDomainName\n      position\n      sourceUrl\n      isOriginalSource\n      __typename\n    }\n    __typename\n  }\n  externalCreators {\n    totalCount\n    items {\n      id\n      creatorName\n      position\n      isOriginalCreator\n      __typename\n    }\n    __typename\n  }\n  cardInfo(referrerId: $referrerId) {\n    id\n    customTitle\n    isCreatorHidden\n    isDouble\n    __typename\n  }\n  __typename\n}\n\nfragment CoreStylesFields on CardStyleSchema {\n  bgStyle\n  layout\n  fontColorType\n  thumbnailLogic\n  id\n  cardId\n  userId\n  createdAt\n  updatedAt\n  bgColor {\n    ...ColorFields\n    __typename\n  }\n  bgImageSet {\n    ...ImagesSetFields\n    __typename\n  }\n  thumbnailImageSet {\n    ...ImagesSetFields\n    __typename\n  }\n  uploadedThumbnailImages {\n    totalCount\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  uploadedBgImages {\n    totalCount\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  prevThumbnailImages {\n    totalCount\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  prevBgImages {\n    totalCount\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  colors {\n    recentlyUsedColor {\n      totalCount\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    recentlyUsedGradient {\n      totalCount\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    suggestedColor {\n      totalCount\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    suggestedGradient {\n      totalCount\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment ColorFields on ColorSchema {\n  colorType\n  colorValue\n  fontColor\n  id\n  __typename\n}\n\nfragment ImagesSetFields on ImageSetSchema {\n  imageId\n  images {\n    url\n    fontColor\n    id\n    __typename\n  }\n  id\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/gql/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">linkCollectionsAndCards</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation linkCollectionsAndCards($cardsIds: [String!]!, $collectionsIds: [String]!, $referrerId: String) {
  linkCollectionsAndCards(cardsIds: $cardsIds, collectionsIds: $collectionsIds) {
    id
    cardsFromCollection(filters: {idIn: $cardsIds}) {
      totalCount
      items {
        ...CoreCardFields
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment CoreCardFields on CardSchema {
  id
  userId
  type
  linkText
  linkHtml
  extractionStatus
  isPrivate
  isSavedByMe
  isLikedByMe
  isPickedByMe
  isPinnedByMe
  isPrivate
  ...CoreCardInfoFields
  cardStyle(referrerId: $referrerId) {
    ...CoreStylesFields
    __typename
  }
  __typename
}

fragment CoreCardInfoFields on CardSchema {
  tags {
    items
    totalCount
    __typename
  }
  mediaTags {
    items
    totalCount
    __typename
  }
  creators {
    totalCount
    items {
      userId
      roleName
      user {
        id
        username
        userInfo {
          firstName
          lastName
          __typename
        }
        userStyle {
          thumbnailImageSet {
            images(filters: {imageTypeIn: [PREVIEW]}) {
              url
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
  externalSources {
    totalCount
    items {
      id
      sourceDomainName
      position
      sourceUrl
      isOriginalSource
      __typename
    }
    __typename
  }
  externalCreators {
    totalCount
    items {
      id
      creatorName
      position
      isOriginalCreator
      __typename
    }
    __typename
  }
  cardInfo(referrerId: $referrerId) {
    id
    customTitle
    isCreatorHidden
    isDouble
    __typename
  }
  __typename
}

fragment CoreStylesFields on CardStyleSchema {
  bgStyle
  layout
  fontColorType
  thumbnailLogic
  id
  cardId
  userId
  createdAt
  updatedAt
  bgColor {
    ...ColorFields
    __typename
  }
  bgImageSet {
    ...ImagesSetFields
    __typename
  }
  thumbnailImageSet {
    ...ImagesSetFields
    __typename
  }
  uploadedThumbnailImages {
    totalCount
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  uploadedBgImages {
    totalCount
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  prevThumbnailImages {
    totalCount
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  prevBgImages {
    totalCount
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  colors {
    recentlyUsedColor {
      totalCount
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    recentlyUsedGradient {
      totalCount
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    suggestedColor {
      totalCount
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    suggestedGradient {
      totalCount
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    __typename
  }
  __typename
}

fragment ColorFields on ColorSchema {
  colorType
  colorValue
  fontColor
  id
  __typename
}

fragment ImagesSetFields on ImageSetSchema {
  imageId
  images {
    url
    fontColor
    id
    __typename
  }
  id
  __typename
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;cardsIds&quot;:[&quot;${extraction_card_id}&quot;],&quot;collectionsIds&quot;:[&quot;${collection_id}&quot;]}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://gql.guidehuman.co/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${protocol}://gql.guidehuman.co</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${token}</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="createUserGroup" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="createUserGroup" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;createUserGroup&quot;,&quot;variables&quot;:{&quot;title&quot;:&quot;${title}&quot;,&quot;isPrivate&quot;:false,&quot;userCardIds&quot;:[&quot;4d2c30d9-e08b-4dd4-bd5b-2f6f22cfbbec&quot;,&quot;666fcab8-cea6-426f-8078-516108f3fb9b&quot;]},&quot;query&quot;:&quot;mutation createUserGroup($title: String!, $isPrivate: Boolean, $userCardIds: [String], $referrerId: String) {\n  createUserGroup(title: $title, isPrivate: $isPrivate, userCardIds: $userCardIds) {\n    ...CoreCardFields\n    __typename\n  }\n}\n\nfragment CoreCardFields on CardSchema {\n  id\n  userId\n  type\n  linkText\n  linkHtml\n  extractionStatus\n  isPrivate\n  isSavedByMe\n  isLikedByMe\n  isPickedByMe\n  isPinnedByMe\n  isPrivate\n  ...CoreCardInfoFields\n  cardStyle(referrerId: $referrerId) {\n    ...CoreStylesFields\n    __typename\n  }\n  __typename\n}\n\nfragment CoreCardInfoFields on CardSchema {\n  tags {\n    items\n    totalCount\n    __typename\n  }\n  mediaTags {\n    items\n    totalCount\n    __typename\n  }\n  creators {\n    totalCount\n    items {\n      userId\n      roleName\n      user {\n        id\n        username\n        userInfo {\n          firstName\n          lastName\n          __typename\n        }\n        userStyle {\n          thumbnailImageSet {\n            images(filters: {imageTypeIn: [PREVIEW]}) {\n              url\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  externalSources {\n    totalCount\n    items {\n      id\n      sourceDomainName\n      position\n      sourceUrl\n      isOriginalSource\n      __typename\n    }\n    __typename\n  }\n  externalCreators {\n    totalCount\n    items {\n      id\n      creatorName\n      position\n      isOriginalCreator\n      __typename\n    }\n    __typename\n  }\n  cardInfo(referrerId: $referrerId) {\n    id\n    customTitle\n    isCreatorHidden\n    isDouble\n    __typename\n  }\n  __typename\n}\n\nfragment CoreStylesFields on CardStyleSchema {\n  bgStyle\n  layout\n  fontColorType\n  thumbnailLogic\n  id\n  cardId\n  userId\n  createdAt\n  updatedAt\n  bgColor {\n    ...ColorFields\n    __typename\n  }\n  bgImageSet {\n    ...ImagesSetFields\n    __typename\n  }\n  thumbnailImageSet {\n    ...ImagesSetFields\n    __typename\n  }\n  uploadedThumbnailImages {\n    totalCount\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  uploadedBgImages {\n    totalCount\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  prevThumbnailImages {\n    totalCount\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  prevBgImages {\n    totalCount\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  colors {\n    recentlyUsedColor {\n      totalCount\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    recentlyUsedGradient {\n      totalCount\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    suggestedColor {\n      totalCount\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    suggestedGradient {\n      totalCount\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment ColorFields on ColorSchema {\n  colorType\n  colorValue\n  fontColor\n  id\n  __typename\n}\n\nfragment ImagesSetFields on ImageSetSchema {\n  imageId\n  images {\n    url\n    fontColor\n    id\n    __typename\n  }\n  id\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/gql/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">createUserGroup</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation createUserGroup($title: String!, $isPrivate: Boolean, $userCardIds: [String], $referrerId: String) {
  createUserGroup(title: $title, isPrivate: $isPrivate, userCardIds: $userCardIds) {
    ...CoreCardFields
    __typename
  }
}

fragment CoreCardFields on CardSchema {
  id
  userId
  type
  linkText
  linkHtml
  extractionStatus
  isPrivate
  isSavedByMe
  isLikedByMe
  isPickedByMe
  isPinnedByMe
  isPrivate
  ...CoreCardInfoFields
  cardStyle(referrerId: $referrerId) {
    ...CoreStylesFields
    __typename
  }
  __typename
}

fragment CoreCardInfoFields on CardSchema {
  tags {
    items
    totalCount
    __typename
  }
  mediaTags {
    items
    totalCount
    __typename
  }
  creators {
    totalCount
    items {
      userId
      roleName
      user {
        id
        username
        userInfo {
          firstName
          lastName
          __typename
        }
        userStyle {
          thumbnailImageSet {
            images(filters: {imageTypeIn: [PREVIEW]}) {
              url
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
  externalSources {
    totalCount
    items {
      id
      sourceDomainName
      position
      sourceUrl
      isOriginalSource
      __typename
    }
    __typename
  }
  externalCreators {
    totalCount
    items {
      id
      creatorName
      position
      isOriginalCreator
      __typename
    }
    __typename
  }
  cardInfo(referrerId: $referrerId) {
    id
    customTitle
    isCreatorHidden
    isDouble
    __typename
  }
  __typename
}

fragment CoreStylesFields on CardStyleSchema {
  bgStyle
  layout
  fontColorType
  thumbnailLogic
  id
  cardId
  userId
  createdAt
  updatedAt
  bgColor {
    ...ColorFields
    __typename
  }
  bgImageSet {
    ...ImagesSetFields
    __typename
  }
  thumbnailImageSet {
    ...ImagesSetFields
    __typename
  }
  uploadedThumbnailImages {
    totalCount
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  uploadedBgImages {
    totalCount
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  prevThumbnailImages {
    totalCount
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  prevBgImages {
    totalCount
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  colors {
    recentlyUsedColor {
      totalCount
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    recentlyUsedGradient {
      totalCount
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    suggestedColor {
      totalCount
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    suggestedGradient {
      totalCount
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    __typename
  }
  __typename
}

fragment ColorFields on ColorSchema {
  colorType
  colorValue
  fontColor
  id
  __typename
}

fragment ImagesSetFields on ImageSetSchema {
  imageId
  images {
    url
    fontColor
    id
    __typename
  }
  id
  __typename
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;title&quot;:&quot;${title}&quot;,&quot;isPrivate&quot;:false,&quot;userCardIds&quot;:[&quot;4d2c30d9-e08b-4dd4-bd5b-2f6f22cfbbec&quot;,&quot;666fcab8-cea6-426f-8078-516108f3fb9b&quot;]}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://gql.guidehuman.co/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${protocol}://gql.guidehuman.co</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${token}</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.util.Random;
import java.lang.StringBuilder;
import java.text.SimpleDateFormat;
String generateRandom(int quantity, Random random)
{
StringBuilder builder = new StringBuilder();
String mCHAR = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;;
for (int i = 0; i &lt; quantity; i++)
{
int number = random.nextInt(mCHAR.length());
char ch = mCHAR.charAt(number);
builder.append(ch);
}
return builder.toString();
}
Random random = new Random();
String title = &quot;test_&quot; + generateRandom(1, random);
vars.put(&quot;title&quot;, title);
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="pinCard" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="pinCard" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;pinCard&quot;,&quot;variables&quot;:{&quot;cardId&quot;:&quot;${extraction_card_id}&quot;},&quot;query&quot;:&quot;mutation pinCard($cardId: String!) {\n  pinCard(cardId: $cardId) {\n    id\n    userId\n    isPinnedByMe\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/gql/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">pinCard</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation pinCard($cardId: String!) {
  pinCard(cardId: $cardId) {
    id
    userId
    isPinnedByMe
    __typename
  }
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;cardId&quot;:&quot;${extraction_card_id}&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://gql.guidehuman.co/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${protocol}://gql.guidehuman.co</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${token}</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="updateCard" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="updateCard" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;updateCard&quot;,&quot;variables&quot;:{&quot;referrerId&quot;:&quot;${refferer_id}&quot;,&quot;cardId&quot;:&quot;${extraction_card_id}&quot;,&quot;cardInfo&quot;:{&quot;customTitle&quot;:&quot;${customTitle&quot;,&quot;isCreatorHidden&quot;:&quot;${isCreatorHidden}&quot;}},&quot;query&quot;:&quot;mutation updateCard($cardId: String!, $cardInfo: CardInfoInput, $cardStyle: CardStyleInput, $referrerId: String) {\n  updateCard(cardId: $cardId, cardInfo: $cardInfo, cardStyle: $cardStyle) {\n    id\n    ...CoreCardInfoFields\n    cardStyle(referrerId: $referrerId) {\n      ...CoreStylesFields\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CoreCardInfoFields on CardSchema {\n  tags {\n    items\n    totalCount\n    __typename\n  }\n  mediaTags {\n    items\n    totalCount\n    __typename\n  }\n  creators {\n    totalCount\n    items {\n      userId\n      roleName\n      user {\n        id\n        username\n        userInfo {\n          firstName\n          lastName\n          __typename\n        }\n        userStyle {\n          thumbnailImageSet {\n            images(filters: {imageTypeIn: [PREVIEW]}) {\n              url\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  externalSources {\n    totalCount\n    items {\n      id\n      sourceDomainName\n      position\n      sourceUrl\n      isOriginalSource\n      __typename\n    }\n    __typename\n  }\n  externalCreators {\n    totalCount\n    items {\n      id\n      creatorName\n      position\n      isOriginalCreator\n      __typename\n    }\n    __typename\n  }\n  cardInfo(referrerId: $referrerId) {\n    id\n    customTitle\n    isCreatorHidden\n    isDouble\n    __typename\n  }\n  __typename\n}\n\nfragment CoreStylesFields on CardStyleSchema {\n  bgStyle\n  layout\n  fontColorType\n  thumbnailLogic\n  id\n  cardId\n  userId\n  createdAt\n  updatedAt\n  bgColor {\n    ...ColorFields\n    __typename\n  }\n  bgImageSet {\n    ...ImagesSetFields\n    __typename\n  }\n  thumbnailImageSet {\n    ...ImagesSetFields\n    __typename\n  }\n  uploadedThumbnailImages {\n    totalCount\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  uploadedBgImages {\n    totalCount\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  prevThumbnailImages {\n    totalCount\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  prevBgImages {\n    totalCount\n    items {\n      ...ImagesSetFields\n      __typename\n    }\n    __typename\n  }\n  colors {\n    recentlyUsedColor {\n      totalCount\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    recentlyUsedGradient {\n      totalCount\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    suggestedColor {\n      totalCount\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    suggestedGradient {\n      totalCount\n      items {\n        ...ColorFields\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment ColorFields on ColorSchema {\n  colorType\n  colorValue\n  fontColor\n  id\n  __typename\n}\n\nfragment ImagesSetFields on ImageSetSchema {\n  imageId\n  images {\n    url\n    fontColor\n    id\n    __typename\n  }\n  id\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/gql/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">updateCard</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">mutation updateCard($cardId: String!, $cardInfo: CardInfoInput, $cardStyle: CardStyleInput, $referrerId: String) {
  updateCard(cardId: $cardId, cardInfo: $cardInfo, cardStyle: $cardStyle) {
    id
    ...CoreCardInfoFields
    cardStyle(referrerId: $referrerId) {
      ...CoreStylesFields
      __typename
    }
    __typename
  }
}

fragment CoreCardInfoFields on CardSchema {
  tags {
    items
    totalCount
    __typename
  }
  mediaTags {
    items
    totalCount
    __typename
  }
  creators {
    totalCount
    items {
      userId
      roleName
      user {
        id
        username
        userInfo {
          firstName
          lastName
          __typename
        }
        userStyle {
          thumbnailImageSet {
            images(filters: {imageTypeIn: [PREVIEW]}) {
              url
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
  externalSources {
    totalCount
    items {
      id
      sourceDomainName
      position
      sourceUrl
      isOriginalSource
      __typename
    }
    __typename
  }
  externalCreators {
    totalCount
    items {
      id
      creatorName
      position
      isOriginalCreator
      __typename
    }
    __typename
  }
  cardInfo(referrerId: $referrerId) {
    id
    customTitle
    isCreatorHidden
    isDouble
    __typename
  }
  __typename
}

fragment CoreStylesFields on CardStyleSchema {
  bgStyle
  layout
  fontColorType
  thumbnailLogic
  id
  cardId
  userId
  createdAt
  updatedAt
  bgColor {
    ...ColorFields
    __typename
  }
  bgImageSet {
    ...ImagesSetFields
    __typename
  }
  thumbnailImageSet {
    ...ImagesSetFields
    __typename
  }
  uploadedThumbnailImages {
    totalCount
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  uploadedBgImages {
    totalCount
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  prevThumbnailImages {
    totalCount
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  prevBgImages {
    totalCount
    items {
      ...ImagesSetFields
      __typename
    }
    __typename
  }
  colors {
    recentlyUsedColor {
      totalCount
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    recentlyUsedGradient {
      totalCount
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    suggestedColor {
      totalCount
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    suggestedGradient {
      totalCount
      items {
        ...ColorFields
        __typename
      }
      __typename
    }
    __typename
  }
  __typename
}

fragment ColorFields on ColorSchema {
  colorType
  colorValue
  fontColor
  id
  __typename
}

fragment ImagesSetFields on ImageSetSchema {
  imageId
  images {
    url
    fontColor
    id
    __typename
  }
  id
  __typename
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;referrerId&quot;:&quot;${refferer_id}&quot;,&quot;cardId&quot;:&quot;${extraction_card_id}&quot;,&quot;cardInfo&quot;:{&quot;customTitle&quot;:&quot;${customTitle&quot;,&quot;isCreatorHidden&quot;:&quot;${isCreatorHidden}&quot;}}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://gql.guidehuman.co/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${protocol}://gql.guidehuman.co</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${token}</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;104&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.util.Random;
import java.lang.StringBuilder;
import java.text.SimpleDateFormat;
String generateRandom(int quantity, Random random)
{
StringBuilder builder = new StringBuilder();
String mCHAR = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;;
for (int i = 0; i &lt; quantity; i++)
{
int number = random.nextInt(mCHAR.length());
char ch = mCHAR.charAt(number);
builder.append(ch);
}
return builder.toString();
}
Random random = new Random();
String customTitle = &quot;test_&quot; + generateRandom(1, random);
String isCreatorHidden = false;
vars.put(&quot;customTitle&quot;, customTitle);
vars.put(&quot;isCreatorHidden&quot;, isCreatorHidden);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="User2" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Controller" enabled="false">
          <stringProp name="IncludeController.includepath">D:\Мои данные(Паша)\Programs\load testing\Pablo&apos;s profile page Test fragment.jmx</stringProp>
        </IncludeController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="my profile page" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Pablo&apos;s profile page" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getUserProfile&quot;,&quot;variables&quot;:{&quot;username&quot;:&quot;pablo&quot;},&quot;query&quot;:&quot;query getUserProfile($username: String!) {\n  allUsers(filters: {username: $username}) {\n    totalCount\n    items {\n      id\n      cardId\n      username\n      createdAt\n      stytchUserId\n      userInfo {\n        firstName\n        lastName\n        bio\n        __typename\n      }\n      userStyle {\n        id\n        thumbnailImageSet {\n          ...ImagesSetFields\n          __typename\n        }\n        layoutCollection\n        __typename\n      }\n      userCounters {\n        followersCount\n        followingsCount\n        connectionsCount\n        __typename\n      }\n      isFollowedByMe\n      isNotificationsEnable\n      isBlockedByMe\n      isBlockedMe\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ImagesSetFields on ImageSetSchema {\n  id\n  imageId\n  images {\n    id\n    url\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">staging.guidehero.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/gql/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getUserProfile</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getUserProfile($username: String!) {
  allUsers(filters: {username: $username}) {
    totalCount
    items {
      id
      cardId
      username
      createdAt
      stytchUserId
      userInfo {
        firstName
        lastName
        bio
        __typename
      }
      userStyle {
        id
        thumbnailImageSet {
          ...ImagesSetFields
          __typename
        }
        layoutCollection
        __typename
      }
      userCounters {
        followersCount
        followingsCount
        connectionsCount
        __typename
      }
      isFollowedByMe
      isNotificationsEnable
      isBlockedByMe
      isBlockedMe
      __typename
    }
    __typename
  }
}

fragment ImagesSetFields on ImageSetSchema {
  id
  imageId
  images {
    id
    url
    __typename
  }
  __typename
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;username&quot;:&quot;pablo&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://stage.guidehuman.co/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${protocol}://stage.guidehuman.co</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer eyJhbGciOiJIUzUxMiIsImlhdCI6MTY3NzE3MzM4MywiZXhwIjoxNzA4NzA5MzgzfQ.IntcInVzZXJfaWRcIjogXCI5YmUxMjgzYS1hMjFmLTQwYjMtYjI3OS0xYzlkOGYzMzVlNzBcIn0i.PNgW9ciJm7Q6-mbA2-Y3sYjv2QuU51kw38CXe5vRf8qeyAH8zJ3YO83aVv0eaVRAx-y4QvA1u43Df6eE5oUqbA</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Not_A Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;109&quot;, &quot;Chromium&quot;;v=&quot;109&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames"></stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs"></stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">user_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">Not found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${user_id}&quot; == &quot;9be1283a-a21f-40b3-b279-1c9d8f335e70&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/gql/-24" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getProfileLists&quot;,&quot;variables&quot;:{&quot;type&quot;:&quot;COLLECTION&quot;,&quot;referrerId&quot;:&quot;9be1283a-a21f-40b3-b279-1c9d8f335e70&quot;,&quot;username&quot;:&quot;pablo&quot;,&quot;offset&quot;:0},&quot;query&quot;:&quot;query getProfileLists($username: String!, $offset: Int!, $type: CardTypeOptions = COLLECTION, $limit: Int = 10, $referrerId: String) {\n  allUsers(filters: {username: $username}) {\n    totalCount\n    items {\n      id\n      pickedCards(limit: $limit, offset: $offset, filters: {type: $type}) {\n        totalCount\n        items {\n          ...ListPreview\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ListPreview on CardSchema {\n  id\n  type\n  title\n  hasNewCollaboratorsCards\n  isCollaborative\n  cardsFromCollection {\n    totalCount\n    items {\n      id\n      type\n      __typename\n    }\n    __typename\n  }\n  creators(limit: 3) {\n    totalCount\n    items {\n      user {\n        ...PreviewActionUser\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  cardStyle(referrerId: $referrerId) {\n    id\n    bgColor {\n      id\n      colorValue\n      gradientStart\n      __typename\n    }\n    ...CollectionCover\n    __typename\n  }\n  __typename\n}\n\nfragment PreviewActionUser on UserObjectType {\n  ...CoreUserFields\n  userStyle {\n    id\n    thumbnailImageSet {\n      id\n      imageId\n      images(filters: {imageType: ICON}) {\n        url\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  isBlockedByMe\n  isBlockedMe\n  __typename\n}\n\nfragment CoreUserFields on UserObjectType {\n  id\n  username\n  stytchUserId\n  userInfo {\n    firstName\n    lastName\n    bio\n    __typename\n  }\n  __typename\n}\n\nfragment CollectionCover on CardStyleSchema {\n  collectionCover(limit: 4) {\n    ...CoverFields\n    __typename\n  }\n  collectionBgColors {\n    colorValue\n    id\n    __typename\n  }\n  __typename\n}\n\nfragment CoverFields on CollectionCoverSchema {\n  totalCount\n  items {\n    ... on ImageSetSchema {\n      id\n      imageId\n      images(filters: {imageType: PREVIEW}) {\n        id\n        url\n        __typename\n      }\n      __typename\n    }\n    ... on CardTitleObjectType {\n      title\n      __typename\n    }\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">staging.guidehero.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/gql/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getProfileLists</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getProfileLists($username: String!, $offset: Int!, $type: CardTypeOptions = COLLECTION, $limit: Int = 10, $referrerId: String) {
  allUsers(filters: {username: $username}) {
    totalCount
    items {
      id
      pickedCards(limit: $limit, offset: $offset, filters: {type: $type}) {
        totalCount
        items {
          ...ListPreview
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment ListPreview on CardSchema {
  id
  type
  title
  hasNewCollaboratorsCards
  isCollaborative
  cardsFromCollection {
    totalCount
    items {
      id
      type
      __typename
    }
    __typename
  }
  creators(limit: 3) {
    totalCount
    items {
      user {
        ...PreviewActionUser
        __typename
      }
      __typename
    }
    __typename
  }
  cardStyle(referrerId: $referrerId) {
    id
    bgColor {
      id
      colorValue
      gradientStart
      __typename
    }
    ...CollectionCover
    __typename
  }
  __typename
}

fragment PreviewActionUser on UserObjectType {
  ...CoreUserFields
  userStyle {
    id
    thumbnailImageSet {
      id
      imageId
      images(filters: {imageType: ICON}) {
        url
        id
        __typename
      }
      __typename
    }
    __typename
  }
  isBlockedByMe
  isBlockedMe
  __typename
}

fragment CoreUserFields on UserObjectType {
  id
  username
  stytchUserId
  userInfo {
    firstName
    lastName
    bio
    __typename
  }
  __typename
}

fragment CollectionCover on CardStyleSchema {
  collectionCover(limit: 4) {
    ...CoverFields
    __typename
  }
  collectionBgColors {
    colorValue
    id
    __typename
  }
  __typename
}

fragment CoverFields on CollectionCoverSchema {
  totalCount
  items {
    ... on ImageSetSchema {
      id
      imageId
      images(filters: {imageType: PREVIEW}) {
        id
        url
        __typename
      }
      __typename
    }
    ... on CardTitleObjectType {
      title
      __typename
    }
    __typename
  }
  __typename
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;type&quot;:&quot;COLLECTION&quot;,&quot;referrerId&quot;:&quot;9be1283a-a21f-40b3-b279-1c9d8f335e70&quot;,&quot;username&quot;:&quot;pablo&quot;,&quot;offset&quot;:0}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://stage.guidehuman.co/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${protocol}://stage.guidehuman.co</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer eyJhbGciOiJIUzUxMiIsImlhdCI6MTY3NzE3MzM4MywiZXhwIjoxNzA4NzA5MzgzfQ.IntcInVzZXJfaWRcIjogXCI5YmUxMjgzYS1hMjFmLTQwYjMtYjI3OS0xYzlkOGYzMzVlNzBcIn0i.PNgW9ciJm7Q6-mbA2-Y3sYjv2QuU51kw38CXe5vRf8qeyAH8zJ3YO83aVv0eaVRAx-y4QvA1u43Df6eE5oUqbA</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Not_A Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;109&quot;, &quot;Chromium&quot;;v=&quot;109&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/gql/-18" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getUserCards&quot;,&quot;variables&quot;:{&quot;limit&quot;:3,&quot;referrerId&quot;:&quot;9be1283a-a21f-40b3-b279-1c9d8f335e70&quot;,&quot;username&quot;:&quot;pablo&quot;,&quot;offset&quot;:0},&quot;query&quot;:&quot;query getUserCards($username: String!, $offset: Int!, $type: CardTypeOptions = CARD, $limit: Int = 10, $referrerId: String, $excludedIds: [String] = [], $sorting: ECardSortingOptions = PICK_DATE_CREATED_DESC, $refListId: String) {\n  allUsers(filters: {username: $username}) {\n    totalCount\n    items {\n      id\n      stytchUserId\n      username\n      pickedCards(\n        limit: $limit\n        offset: $offset\n        sorting: $sorting\n        filters: {type: $type, not: {idIn: $excludedIds}}\n      ) {\n        totalCount\n        items {\n          ...PreviewCard\n          ...PreviewImages\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PreviewCard on CardSchema {\n  id\n  type\n  title\n  extractionStatus\n  isLikedByMe\n  isPickedByMe\n  isPinnedByMe\n  isPrivate\n  permissions\n  creators(limit: 3) {\n    totalCount\n    items {\n      user {\n        ...PreviewActionUser\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  externalSources {\n    totalCount\n    items {\n      id\n      sourceUrl\n      sourceDomainName\n      __typename\n    }\n    __typename\n  }\n  tags(limit: 1) {\n    totalCount\n    items {\n      id\n      name\n      __typename\n    }\n    __typename\n  }\n  mediaTags(limit: 1) {\n    totalCount\n    items {\n      id\n      name\n      __typename\n    }\n    __typename\n  }\n  cardInfo(referrerId: $referrerId) {\n    customTitle\n    isCreatorHidden\n    isDouble\n    id\n    __typename\n  }\n  cardStyle(referrerId: $referrerId) {\n    bgStyle\n    layout\n    fontColorType\n    id\n    bgColor {\n      colorType\n      colorValue\n      fontColor\n      id\n      gradientStart\n      __typename\n    }\n    __typename\n  }\n  ...ExtraData\n  __typename\n}\n\nfragment PreviewActionUser on UserObjectType {\n  ...CoreUserFields\n  userStyle {\n    id\n    thumbnailImageSet {\n      id\n      imageId\n      images(filters: {imageType: ICON}) {\n        url\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  isBlockedByMe\n  isBlockedMe\n  __typename\n}\n\nfragment CoreUserFields on UserObjectType {\n  id\n  username\n  stytchUserId\n  userInfo {\n    firstName\n    lastName\n    bio\n    __typename\n  }\n  __typename\n}\n\nfragment ExtraData on CardSchema {\n  extraData(referrerId: $referrerId, referrerCardId: $refListId) {\n    totalCount\n    items {\n      ... on CardCommentSchema {\n        id\n        text\n        user {\n          ...PreviewActionUser\n          __typename\n        }\n        __typename\n      }\n      ... on CollectionCardLinkSchema {\n        id\n        user {\n          ...PreviewActionUser\n          __typename\n        }\n        collection {\n          id\n          type\n          title\n          __typename\n        }\n        __typename\n      }\n      ... on CardPickSchema {\n        id\n        createdAt\n        user {\n          ...PreviewActionUser\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment PreviewImages on CardSchema {\n  cardStyle(referrerId: $referrerId) {\n    thumbnailImageSet {\n      imageId\n      images(filters: {imageType: PREVIEW}) {\n        url\n        fontColor\n        id\n        __typename\n      }\n      id\n      __typename\n    }\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">staging.guidehero.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/gql/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getUserCards</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getUserCards($username: String!, $offset: Int!, $type: CardTypeOptions = CARD, $limit: Int = 10, $referrerId: String, $excludedIds: [String] = [], $sorting: ECardSortingOptions = PICK_DATE_CREATED_DESC, $refListId: String) {
  allUsers(filters: {username: $username}) {
    totalCount
    items {
      id
      stytchUserId
      username
      pickedCards(
        limit: $limit
        offset: $offset
        sorting: $sorting
        filters: {type: $type, not: {idIn: $excludedIds}}
      ) {
        totalCount
        items {
          ...PreviewCard
          ...PreviewImages
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment PreviewCard on CardSchema {
  id
  type
  title
  extractionStatus
  isLikedByMe
  isPickedByMe
  isPinnedByMe
  isPrivate
  permissions
  creators(limit: 3) {
    totalCount
    items {
      user {
        ...PreviewActionUser
        __typename
      }
      __typename
    }
    __typename
  }
  externalSources {
    totalCount
    items {
      id
      sourceUrl
      sourceDomainName
      __typename
    }
    __typename
  }
  tags(limit: 1) {
    totalCount
    items {
      id
      name
      __typename
    }
    __typename
  }
  mediaTags(limit: 1) {
    totalCount
    items {
      id
      name
      __typename
    }
    __typename
  }
  cardInfo(referrerId: $referrerId) {
    customTitle
    isCreatorHidden
    isDouble
    id
    __typename
  }
  cardStyle(referrerId: $referrerId) {
    bgStyle
    layout
    fontColorType
    id
    bgColor {
      colorType
      colorValue
      fontColor
      id
      gradientStart
      __typename
    }
    __typename
  }
  ...ExtraData
  __typename
}

fragment PreviewActionUser on UserObjectType {
  ...CoreUserFields
  userStyle {
    id
    thumbnailImageSet {
      id
      imageId
      images(filters: {imageType: ICON}) {
        url
        id
        __typename
      }
      __typename
    }
    __typename
  }
  isBlockedByMe
  isBlockedMe
  __typename
}

fragment CoreUserFields on UserObjectType {
  id
  username
  stytchUserId
  userInfo {
    firstName
    lastName
    bio
    __typename
  }
  __typename
}

fragment ExtraData on CardSchema {
  extraData(referrerId: $referrerId, referrerCardId: $refListId) {
    totalCount
    items {
      ... on CardCommentSchema {
        id
        text
        user {
          ...PreviewActionUser
          __typename
        }
        __typename
      }
      ... on CollectionCardLinkSchema {
        id
        user {
          ...PreviewActionUser
          __typename
        }
        collection {
          id
          type
          title
          __typename
        }
        __typename
      }
      ... on CardPickSchema {
        id
        createdAt
        user {
          ...PreviewActionUser
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
  __typename
}

fragment PreviewImages on CardSchema {
  cardStyle(referrerId: $referrerId) {
    thumbnailImageSet {
      imageId
      images(filters: {imageType: PREVIEW}) {
        url
        fontColor
        id
        __typename
      }
      id
      __typename
    }
    __typename
  }
  __typename
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;limit&quot;:3,&quot;referrerId&quot;:&quot;9be1283a-a21f-40b3-b279-1c9d8f335e70&quot;,&quot;username&quot;:&quot;pablo&quot;,&quot;offset&quot;:0}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://stage.guidehuman.co/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${protocol}://stage.guidehuman.co</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer eyJhbGciOiJIUzUxMiIsImlhdCI6MTY3NzE3MzM4MywiZXhwIjoxNzA4NzA5MzgzfQ.IntcInVzZXJfaWRcIjogXCI5YmUxMjgzYS1hMjFmLTQwYjMtYjI3OS0xYzlkOGYzMzVlNzBcIn0i.PNgW9ciJm7Q6-mbA2-Y3sYjv2QuU51kw38CXe5vRf8qeyAH8zJ3YO83aVv0eaVRAx-y4QvA1u43Df6eE5oUqbA</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Not_A Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;109&quot;, &quot;Chromium&quot;;v=&quot;109&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Recording Controller" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/gql/-46" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getListsWithItem&quot;,&quot;variables&quot;:{&quot;itemId&quot;:&quot;bd234463-c4d4-4b2c-9cae-d102f6d2e041&quot;},&quot;query&quot;:&quot;query getListsWithItem($itemId: String) {\n  allCards(filters: {id: $itemId}) {\n    totalCount\n    items {\n      id\n      parentCards {\n        totalCount\n        items {\n          id\n          title\n          type\n          isCollaborative\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">staging.guidehero.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/gql/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getListsWithItem</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getListsWithItem($itemId: String) {
  allCards(filters: {id: $itemId}) {
    totalCount
    items {
      id
      parentCards {
        totalCount
        items {
          id
          title
          type
          isCollaborative
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;itemId&quot;:&quot;bd234463-c4d4-4b2c-9cae-d102f6d2e041&quot;}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://stage.guidehuman.co/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${protocol}://stage.guidehuman.co</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer eyJhbGciOiJIUzUxMiIsImlhdCI6MTY3NzE3MzM4MywiZXhwIjoxNzA4NzA5MzgzfQ.IntcInVzZXJfaWRcIjogXCI5YmUxMjgzYS1hMjFmLTQwYjMtYjI3OS0xYzlkOGYzMzVlNzBcIn0i.PNgW9ciJm7Q6-mbA2-Y3sYjv2QuU51kw38CXe5vRf8qeyAH8zJ3YO83aVv0eaVRAx-y4QvA1u43Df6eE5oUqbA</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Not_A Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;109&quot;, &quot;Chromium&quot;;v=&quot;109&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="/gql/-47" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;getComments&quot;,&quot;variables&quot;:{&quot;sorting&quot;:&quot;DESC&quot;,&quot;id&quot;:&quot;bd234463-c4d4-4b2c-9cae-d102f6d2e041&quot;,&quot;selectedUsers&quot;:{&quot;referrerUserId&quot;:&quot;9be1283a-a21f-40b3-b279-1c9d8f335e70&quot;},&quot;offset&quot;:0,&quot;limit&quot;:8},&quot;query&quot;:&quot;query getComments($id: String, $selectedUsers: SelectedUsersInputFilter, $offset: Int!, $limit: Int!, $sorting: ECardActionsSortingOptions = DESC) {\n  allCards(filters: {id: $id}) {\n    totalCount\n    items {\n      id\n      type\n      comments(\n        limit: $limit\n        offset: $offset\n        filters: {selectedUsers: $selectedUsers}\n        sorting: $sorting\n      ) {\n        totalCount\n        items {\n          ...ThoughtFields\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment ThoughtFields on CardCommentSchema {\n  id\n  text\n  updatedAt\n  user {\n    ...PreviewActionUser\n    cardId\n    isFollowedByMe\n    __typename\n  }\n  __typename\n}\n\nfragment PreviewActionUser on UserObjectType {\n  ...CoreUserFields\n  userStyle {\n    id\n    thumbnailImageSet {\n      id\n      imageId\n      images(filters: {imageType: ICON}) {\n        url\n        id\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  isBlockedByMe\n  isBlockedMe\n  __typename\n}\n\nfragment CoreUserFields on UserObjectType {\n  id\n  username\n  stytchUserId\n  userInfo {\n    firstName\n    lastName\n    bio\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">staging.guidehero.co</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/gql/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">getComments</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query getComments($id: String, $selectedUsers: SelectedUsersInputFilter, $offset: Int!, $limit: Int!, $sorting: ECardActionsSortingOptions = DESC) {
  allCards(filters: {id: $id}) {
    totalCount
    items {
      id
      type
      comments(
        limit: $limit
        offset: $offset
        filters: {selectedUsers: $selectedUsers}
        sorting: $sorting
      ) {
        totalCount
        items {
          ...ThoughtFields
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment ThoughtFields on CardCommentSchema {
  id
  text
  updatedAt
  user {
    ...PreviewActionUser
    cardId
    isFollowedByMe
    __typename
  }
  __typename
}

fragment PreviewActionUser on UserObjectType {
  ...CoreUserFields
  userStyle {
    id
    thumbnailImageSet {
      id
      imageId
      images(filters: {imageType: ICON}) {
        url
        id
        __typename
      }
      __typename
    }
    __typename
  }
  isBlockedByMe
  isBlockedMe
  __typename
}

fragment CoreUserFields on UserObjectType {
  id
  username
  stytchUserId
  userInfo {
    firstName
    lastName
    bio
    __typename
  }
  __typename
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;sorting&quot;:&quot;DESC&quot;,&quot;id&quot;:&quot;bd234463-c4d4-4b2c-9cae-d102f6d2e041&quot;,&quot;selectedUsers&quot;:{&quot;referrerUserId&quot;:&quot;9be1283a-a21f-40b3-b279-1c9d8f335e70&quot;},&quot;offset&quot;:0,&quot;limit&quot;:8}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://stage.guidehuman.co/</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,ru-RU;q=0.8,ru;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${protocol}://stage.guidehuman.co</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value">Bearer eyJhbGciOiJIUzUxMiIsImlhdCI6MTY3NzE3MzM4MywiZXhwIjoxNzA4NzA5MzgzfQ.IntcInVzZXJfaWRcIjogXCI5YmUxMjgzYS1hMjFmLTQwYjMtYjI3OS0xYzlkOGYzMzVlNzBcIn0i.PNgW9ciJm7Q6-mbA2-Y3sYjv2QuU51kw38CXe5vRf8qeyAH8zJ3YO83aVv0eaVRAx-y4QvA1u43Df6eE5oUqbA</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Not_A Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;109&quot;, &quot;Chromium&quot;;v=&quot;109&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
